import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { trpc } from "../utils/trpc";

const Home: NextPage = () => {
  const { data, isLoading, refetch } = trpc.message.getAll.useQuery();

  const useDeleteHook = trpc.message.delete.useMutation({
    onSuccess: () => {
      refetch();
    },
    onError: (err) => {
      console.log(err);
    },
  });
  const useAddMessage = trpc.message.add.useMutation({
    onSuccess: () => {
      refetch();
      console.log("success");
    },
    onError: (err) => {
      console.log(err);
    },
  });

  const isSignedIn = useSession().data?.user !== undefined;
  const myUserId = useSession().data?.user?.id;

  const onDelete = (id: string) => {
    useDeleteHook.mutate({
      id,
    });
  };

  interface FormInputs extends HTMLFormElement {
    messageInput: HTMLInputElement;
    // Other form elements go here
  }

  const createMessage = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const text = (e.target as FormInputs).messageInput.value;
    useAddMessage.mutate({
      text,
    });
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className=" flex min-h-screen  flex-col bg-[#111111] px-8">
        <div className="mx-auto mb-16 mt-12 flex max-w-2xl flex-col items-start justify-center">
          <h1 className="mb-4 text-3xl font-bold tracking-tight text-black dark:text-white md:text-5xl">
            Guestbook
          </h1>
          <p className="mb-4 text-gray-600 dark:text-gray-400">
            Leave a comment below. It could be anything â€“ appreciation,
            information, wisdom, or even humor. Surprise me!
          </p>
          <div className="w-full bg-[#101629] p-4">
            <h2 className="text-xl dark:text-white">Sign the Guestbook</h2>
            <p className="my-2 text-white">
              Share a message for a future visitor of my site.
            </p>
            {isSignedIn ? (
              <form onSubmit={createMessage}>
                <div className="flex justify-around rounded-md bg-[#222222] px-2 py-4">
                  <input
                    type="text"
                    name="messageInput"
                    placeholder="Your message..."
                    className="bg-[#222222] text-white focus:outline-none"
                  />
                  <button
                    type="submit"
                    className="h-8 rounded-sm bg-[#333333] px-4 text-white focus:outline-none"
                  >
                    {useAddMessage.isLoading ? "Loading..." : "Submit"}
                  </button>
                </div>
                <p className="text-green-400">
                  Hooray! Thanks for signing my Guestbook.
                </p>
              </form>
            ) : (
              <div className="flex rounded-md px-2 py-4">
                <button className="h-8 rounded-sm bg-[#333333] px-4 text-white focus:outline-none">
                  Login
                </button>
              </div>
            )}
          </div>
          <div className="my-6">
            {!isLoading &&
              data?.map(({ createdAt, id, text, userId, displayName }) => (
                <div key={id} className="text-white">
                  <h3>{text}</h3>
                  <div className="flex gap-4">
                    <p>{displayName}</p>
                    <p>{createdAt.toDateString()}</p>
                    {userId === myUserId ? (
                      <button
                        onClick={() => onDelete(id)}
                        className="text-red-500"
                      >
                        Delete
                      </button>
                    ) : null}
                  </div>
                </div>
              ))}
          </div>
        </div>
        <AuthShowcase />
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
